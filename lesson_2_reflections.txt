Q. What happens when you initialize a repository? Why do you need to do it?
A. Upon initializing a repository, a .git folder is created in that directory which will from then on contain all the history metadata. We need to do it if we require that the git version control system be implemented on that directory. This will allow us to track all the changes made to that directory.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?
A. Staging area keeps track of all the changes being made before a commit is made. The changes will be made in the working directory and they will be implemented into the repository after a commit is made.
Without the staging area, each and every change made will account for it's own commit and this will result in a lot of versions being created without much logic.

Q. How can you use the staging area to make sure you have one commit per logical change?
A. One logical change doesn't necessarily mean one change. For the cases when changes made to several files add up to one logical change, staging area is useful. Once all the changes have been made for a logical change to be justified, they are added to the staging area and then a commit is made.

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A. In case one needs to try out some experimental features while also keeping the current version of project secure, a new branch can be utilized. Doing so will not affect the master branch and the user would still be able to play around with the project.

Q. How do the diagrams help you visualize the branch structure?
A. The diagrams help get a sense of direction of progression as well as how each branch or commit is related to others.

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A. Merging of two branches represents the unification of the content of those branches. It is represented the way it is because the data from two branches is being combined and then the merged version keeps track of the information of both of the parent versions.
